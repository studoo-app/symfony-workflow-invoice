#   _____         _     __ _ _
# |_   _|_ _ ___| | __/ _(_) | ___
#   | |/ _` / __| |/ / |_| | |/ _ \
#   | | (_| \__ \   <|  _| | |  __/
#   |_|\__,_|___/_|\_\_| |_|_|\___|
#
# https://taskfile.dev
#

version: '3'

silent: true

##
## ===   Variables ==================================================
##

vars:
  #
  # TASKFILE
  VERSION: 1.1.3
  CONTRIBUTOR: "Benoit Foujols, Julien Pechberty"
  ENV: main
  #
  # SYSTEM
  PWD: $PWD
  #
  # DOCKER
  DOCKER: docker
  DOCKER_FILE: docker-compose.yml
  DOCKER_RUN: "{{.DOCKER}} run"
  DOCKER_COMPOSE: "{{.DOCKER}} compose"
  #
  # SYMFONY
  SYMFONY_ENV: .env
  SYMFONY: symfony
  SYMFONY_CONSOLE: "{{.SYMFONY}} console"
  SYMFONY_LINT: "{{.SYMFONY_CONSOLE}} lint:"
  #
  # COMPOSER
  COMPOSER: composer
  #
  # PHP QA TOOLS
  PHPQA: jakzal/phpqa
  PHPQA_RUN: "{{.DOCKER_RUN}} --init -it --rm -v {{.PWD}}:/project -w /project {{.PHPQA}}"
  #
  # PHP UNIT TOOLS
  PHPUNIT: "APP_ENV=test {{.SYMFONY}} php bin/phpunit"
  #
  # JS TOOLS
  NPM: npm

##
## ===   TASKS ==================================================
##

tasks:
  default:
    cmds:
      - task: help

  ## === üÜò  HELP ==================================================

  help:
    desc: "Description des t√¢ches disponibles"
    cmds:
      - echo " ";
      - echo "Welcome to Taskfile for Docker/Symfony"
      - echo "Thanks for contributor -> {{.CONTRIBUTOR}}"
      - echo " ";
      - echo " üì¶ YOUR SYSTEM ---------------------------------------------------------"
      - echo "Version {{.VERSION}}"
      - echo 'Your system "{{OS}}" / "{{ARCH}}"'
      - echo " ";
      - echo " üì¶ ESSENTIAL TASK ---------------------------------------------------------"
      - echo "* start               Start project Symfony"
      - echo "* stop                Stop project Symfony"
      - echo " ";
      - echo " üéõÔ∏è OTHER TASK ----------------------------------------------------------"
      - task --list

  update:
    desc: "Update taskfile config in your project"
    cmds:
      - curl -fsS https://raw.githubusercontent.com/studoo-app/go-fast-taskfile/{{.ENV}}/Taskfile.yaml > Taskfile.yaml
      - task: help

  ## === üêã  DOCKER ================================================

  docker-up:
    desc: "Start docker containers"
    cmds:
      - "{{.DOCKER_COMPOSE}} up -d"

  docker-stop:
    desc: "Stop docker containers"
    cmds:
      - "{{.DOCKER_COMPOSE}} stop"

  docker-down:
    desc: "Stop and remove docker containers, networks.."
    cmds:
      - "{{.DOCKER_COMPOSE}} down"

  docker-reset:
    desc: "Stop and reset on your environment"
    cmds:
      - "{{.DOCKER_COMPOSE}} down -v"

  ## === üì¶  CREATE ENVS FILES ==============================================

  # TODO Replace "unknown" -> exit 1
  generate-docker-compose:
    desc: "Create ready to use docker-compose.yml file"
    cmds:
      - task: create-components-dir
      - |
        echo "Choose your database system ? [mariadb/mysql5/mysql8/mongodb] :"
        read CONFIRM
        case $CONFIRM in 
          mariadb)
            task create-mariadb-env;;
          mysql5)
            task create-mysql5-env;;
          mysql8)
            task create-mysql8-env;;
          mongodb)
            task create-mongo-env;;
          *)
              echo -n "unknown";;
        esac
      - task: remove-components-dir

  generate-docker-compose-cli:
    desc: "Create ready to use docker-compose.yml file in one line declaration with cli args"
    cmds:
      - task: create-components-dir
      - |
        case {{.CLI_ARGS}} in 
          mariadb)
            task create-mariadb-env;;
          mysql5)
            task create-mysql5-env;;
          mysql8)
            task create-mysql8-env;;
          mongodb)
            task create-mongodb-env;;
          *)
              echo -n "unknown";;
        esac
      - task: remove-components-dir

  ## === üéõÔ∏è  SYMFONY ===============================================

  sf-start:
    desc: "Start symfony server"
    cmds:
      - "{{.SYMFONY}} serve -d"

  sf-start-no-ssl:
    desc: "Start symfony server"
    cmds:
      - "{{.SYMFONY}} serve --no-tls -d"

  sf-stop:
    desc: "Stop symfony server"
    cmds:
      - "{{.SYMFONY}} server:stop"

  sf-cc:
    desc: "Clear symfony cache"
    cmds:
      - "{{.SYMFONY_CONSOLE}} cache:clear"

  sf-log:
    desc: "Display symfony logs"
    cmds:
      - "{{.SYMFONY_CONSOLE}} server:log"

  sf-ddc:
    desc: "Create symfony database"
    cmds:
      - "{{.SYMFONY_CONSOLE}} doctrine:database:create --if-not-exists"

  sf-ddd:
    desc: "Drop symfony database"
    cmds:
      - "{{.SYMFONY_CONSOLE}} doctrine:database:drop --if-exists --force"

  sf-dsu:
    desc: "Update symfony schema database"
    cmds:
      - "{{.SYMFONY_CONSOLE}} doctrine:schema:update --force"

  sf-mm:
    desc: "Make symfony migration"
    cmds:
      - "{{.SYMFONY_CONSOLE}} make:migration"

  sf-dmm:
    desc: "Migrate"
    cmds:
      - "{{.SYMFONY_CONSOLE}} doctrine:migrations:migrate --no-interaction"

  sf-dfl:
    desc: "Load fixtures"
    cmds:
      - "{{.SYMFONY_CONSOLE}} doctrine:fixtures:load --no-interaction"

  sf-me:
    desc: "Make entity"
    cmds:
      - "{{.SYMFONY_CONSOLE}} make:entity"

  sf-mc:
    desc: "Make controller"
    cmds:
      - "{{.SYMFONY_CONSOLE}} make:controller"

  sf-mf:
    desc: "Make form"
    cmds:
      - "{{.SYMFONY_CONSOLE}} make:form"

  sf-perm:
    desc: "Fix permissions"
    cmds:
      - "chmod -R 777 var"

  sf-sudo-perm:
    desc: "Fix permissions with sudo"
    cmds:
      - "sudo chmod -R 777 var"

  sf-dump-env:
    desc: "Dump env"
    cmds:
      - "{{.SYMFONY_CONSOLE}} debug:dotenv"

  sf-dump-env-container:
    desc: "Dump env container"
    cmds:
      - "{{.SYMFONY_CONSOLE}} debug:container --env-vars"

  sf-dump-router:
    desc: "Dump routes"
    cmds:
      - "{{.SYMFONY_CONSOLE}} debug:router"

  sf-debug:
    desc: "Debug Systeme"
    cmds:
      - "{{.SYMFONY_CONSOLE}} local:php:list"

  sf-open:
    desc: "Open symfony server"
    cmds:
      - "{{.SYMFONY}} open:local"

  sf-check-requirements:
    desc: "Check symfony requirements"
    cmds:
      - "{{.SYMFONY}} check:requirements"

  sf-ddc-test:
    desc: "Create symfony test database"
    cmds:
      - "{{.SYMFONY_CONSOLE}} doctrine:database:create --if-not-exists --env=test"

  sf-ddd-test:
    desc: "Drop symfony test database"
    cmds:
      - "{{.SYMFONY_CONSOLE}} doctrine:database:drop --if-exists --force --env=test"

  sf-dmm-test:
    desc: "Migrate in test database"
    cmds:
      - "{{.SYMFONY_CONSOLE}} doctrine:migrations:migrate --no-interaction --env=test"

  sf-dfl-test:
    desc: "Load fixtures in test database"
    cmds:
      - "{{.SYMFONY_CONSOLE}} doctrine:fixtures:load --no-interaction --env=test"

  ## === üì¶  COMPOSER ==============================================

  composer-install:
    desc: "Install composer dependencies"
    cmds:
      - "{{.COMPOSER}} install"

  composer-update:
    desc: "Update composer dependencies"
    cmds:
      -  "{{.COMPOSER}} update"

  composer-validate:
    desc: Validate composer.json file.
    cmds:
      - "{{.COMPOSER}} validate"

  composer-validate-deep:
    desc: Validate composer.json and composer.lock files in strict mode.
    cmds:
      - "{{.COMPOSER}} validate --strict --check-lock"

  ## === üì¶  NPM ==============================================

  npm-install:
    desc: "Install npm dependencies"
    cmds:
      - "{{.NPM}} install --force"

  npm-update:
    desc: "Update npm dependencies"
    cmds:
      - "{{.NPM}} update"

  npm-build:
    desc: "Build assets"
    cmds:
      - "{{.NPM}} run build"

  npm-dev:
    desc: "Build assets in dev mode"
    cmds:
      - "{{.NPM}} run dev"

  npm-watch:
    desc: "Watch assets"
    cmds:
      - "{{.NPM}} run watch -d"

  ## === üêõ  PHPQA =================================================

  qa-cs-fixer-dry-run:
    desc: "Run php-cs-fixer dry run"
    cmds:
      - "{{.PHPQA_RUN}} php-cs-fixer fix ./src --rules=@Symfony --verbose --dry-run"

  qa-cs-fixer:
    desc: "Run php-cs-fixer"
    cmds:
      - "{{.PHPQA_RUN}} php-cs-fixer fix ./src --rules=@Symfony --verbose"

  qa-phpstan:
    desc: "Run phpstan"
    cmds:
      - "{{.PHPQA_RUN}} phpstan analyse ./src --level=7"

  qa-security-checker:
    desc: "Run security-checker"
    cmds:
      - "{{.SYMFONY}} security:check"

  qa-phpcpd:
    desc: "Run phpcpd (copy/paste detector)"
    cmds:
      - "{{.PHPQA_RUN}} phpcpd ./src"

  qa-php-metrics:
    desc: "Run php-metrics"
    cmds:
      - "{{.PHPQA_RUN}} phpmetrics --report-html=var/phpmetrics ./src"

  qa-lint-twigs:
    desc: "Run lint:twig"
    cmds:
      - "{{.SYMFONY_LINT}}twig ./templates"

  qa-lint-yaml:
    desc: "Run lint:yaml"
    cmds:
      - "{{.SYMFONY_LINT}}yaml ./config"

  qa-lint-container:
    desc: "Run lint:container"
    cmds:
      - "{{.SYMFONY_LINT}}container"

  qa-lint-schema:
    desc: "Lint Doctrine schema"
    cmds:
      - "{{.SYMFONY_CONSOLE}} doctrine:schema:validate --skip-sync -vvv --no-interaction"

  ## === üîé  TESTS =================================================

  tests:
    desc: "Run tests"
    cmds:
      - "{{.PHPUNIT}} --testdox"

  tests-coverage:
    desc: "Run tests with coverage"
    cmds:
      - "{{.PHPUNIT}} --coverage-html var/coverage"

  tests-controllers:
    desc: "Run controllertests"
    cmds:
      - "{{.PHPUNIT}} tests/Controller --testdox"

  tests-units:
    desc: "Run unit tests"
    cmds:
      - "{{.PHPUNIT}} tests/Unit --testdox"

  ## === üë®‚Äçüç≥  DOCKER RECIPES =========================================

  create-components-dir:
    desc: "Create _docker-components directory"
    internal: true
    cmds:
      - |
        if [ ! -d _docker-components ]; then
          mkdir _docker-components
        fi

  remove-components-dir:
    desc: "Remove _docker-components directory"
    cmds:
      - |
        if [ -d _docker-components ]; then
          rm -r _docker-components
        fi

  create-envs:
    desc: "Create environment files"
    cmds:
      - curl -fsS https://raw.githubusercontent.com/studoo-app/go-fast-taskfile/{{.ENV}}/docker-components/_env-ini > _{{.SYMFONY_ENV}}
      # TODO replace uuidgen -> Python
      # py -c 'import sys,uuid; sys.stdout.write(uuid.uuid4().hex)'
      - sed 's/ENVCHANGEUUID/{{.UUID}}/g' _{{.SYMFONY_ENV}} > {{.SYMFONY_ENV}}
      - rm _{{.SYMFONY_ENV}}
    vars:
      UUID:
        # TODO No exe to windows
        sh: uuidgen | tr -d -

  add-env-component:
    desc: "Add component to environment file"
    internal: true
    cmds:
      - curl -fsS https://raw.githubusercontent.com/studoo-app/go-fast-taskfile/{{.ENV}}/docker-components/{{.SRC_COMP_FILENAME}} >> {{.SYMFONY_ENV}}

  # TODO Problem platform https://github.com/golang/go/blob/master/src/go/build/syslist.go
  generate-docker-file:
    desc: "Create empty docker-compose.yml"
    internal: true
    cmds:
      - cmd: touch {{.DOCKER_FILE}}
        platforms: [linux, darwin, freebsd, openbsd, netbsd, dragonfly, solaris]
      #- cmd: type {{.DOCKER_FILE}}
      #  platforms: [windows]

  add-docker-component:
    desc: "Add component to docker-compose"
    internal: true
    cmds:
      - curl -fsS https://raw.githubusercontent.com/studoo-app/go-fast-taskfile/{{.ENV}}/docker-components/{{.SRC_COMP_FILENAME}} > ./_docker-components/{{.DEST_COMP_FILENAME}}
      - DIR="${PWD##*/}" && sed "s/DOCKERCHANGE/$DIR/g" '_docker-components/{{.DEST_COMP_FILENAME}}' >> {{.DOCKER_FILE}}

  create-mariadb-env:
    desc: "Create MariaDb Docker-compose recipe"
    cmds:
      - task: generate-docker-file
      - task: add-docker-component
        vars:
          SRC_COMP_FILENAME: _docker-init.yml
          DEST_COMP_FILENAME: _docker-init.yml
      - task: add-docker-component
        vars:
          SRC_COMP_FILENAME: services/_mariadb.yml
          DEST_COMP_FILENAME: _mariadb.yml
      - task: add-env-component
        vars:
          SRC_COMP_FILENAME: services/_mariadb
      - task: add-docker-component
        vars:
          SRC_COMP_FILENAME: services/_phpmyadmin.yml
          DEST_COMP_FILENAME: _phpmyadmin.yml
      - task: add-docker-component
        vars:
          SRC_COMP_FILENAME: services/_mailer.yml
          DEST_COMP_FILENAME: _mailer.yml
      - task: add-env-component
        vars:
          SRC_COMP_FILENAME: services/_mailer
      - task: add-docker-component
        vars:
          SRC_COMP_FILENAME: _docker-volumes.yml
          DEST_COMP_FILENAME: _docker-volumes.yml
    vars:
      UUID:
        sh: uuidgen | tr -d -

  create-mysql5-env:
    desc: "Create Mysql5 Docker-compose recipe"
    cmds:
      - task: generate-docker-file
      - task: add-docker-component
        vars:
          SRC_COMP_FILENAME: _docker-init.yml
          DEST_COMP_FILENAME: _docker-init.yml
      - task: add-docker-component
        vars:
          SRC_COMP_FILENAME: services/_mysql5.yml
          DEST_COMP_FILENAME: _mysql5.yml
      - task: add-env-component
        vars:
          SRC_COMP_FILENAME: services/_mysql5
      - task: add-docker-component
        vars:
          SRC_COMP_FILENAME: services/_phpmyadmin.yml
          DEST_COMP_FILENAME: _phpmyadmin.yml
      - task: add-docker-component
        vars:
          SRC_COMP_FILENAME: services/_mailer.yml
          DEST_COMP_FILENAME: _mailer.yml
      - task: add-env-component
        vars:
          SRC_COMP_FILENAME: services/_mailer
      - task: add-docker-component
        vars:
          SRC_COMP_FILENAME: _docker-volumes.yml
          DEST_COMP_FILENAME: _docker-volumes.yml
    vars:
      UUID:
        sh: uuidgen | tr -d -

  create-mysql8-env:
    desc: "Create Mysql8 Docker-compose recipe"
    cmds:
      - task: generate-docker-file
      - task: add-docker-component
        vars:
          SRC_COMP_FILENAME: _docker-init.yml
          DEST_COMP_FILENAME: _docker-init.yml
      - task: add-docker-component
        vars:
          SRC_COMP_FILENAME: services/_mysql8.yml
          DEST_COMP_FILENAME: _mysql8.yml
      - task: add-env-component
        vars:
          SRC_COMP_FILENAME: services/_mysql8
      - task: add-docker-component
        vars:
          SRC_COMP_FILENAME: services/_phpmyadmin.yml
          DEST_COMP_FILENAME: _phpmyadmin.yml
      - task: add-docker-component
        vars:
          SRC_COMP_FILENAME: services/_mailer.yml
          DEST_COMP_FILENAME: _mailer.yml
      - task: add-env-component
        vars:
          SRC_COMP_FILENAME: services/_mailer
      - task: add-docker-component
        vars:
          SRC_COMP_FILENAME: _docker-volumes.yml
          DEST_COMP_FILENAME: _docker-volumes.yml
    vars:
      UUID:
        sh: uuidgen | tr -d -


  create-mongodb-env:
    desc: "Create MongoDb Docker-compose recipe"
    cmds:
      - task: generate-docker-file
      - task: add-docker-component
        vars:
          SRC_COMP_FILENAME: _docker-init.yml
          DEST_COMP_FILENAME: _docker-init.yml
      - task: add-docker-component
        vars:
          SRC_COMP_FILENAME: services/_mongo.yml
          DEST_COMP_FILENAME: _mongo.yml
      - task: add-docker-component
        vars:
          SRC_COMP_FILENAME: services/_mongo-express.yml
          DEST_COMP_FILENAME: _mongo-express.yml
      - task: add-env-component
        vars:
          SRC_COMP_FILENAME: services/_mongo
      - task: add-docker-component
        vars:
          SRC_COMP_FILENAME: services/_mailer.yml
          DEST_COMP_FILENAME: _mailer.yml
      - task: add-env-component
        vars:
          SRC_COMP_FILENAME: services/_mailer
      - task: add-docker-component
        vars:
          SRC_COMP_FILENAME: _docker-volumes.yml
          DEST_COMP_FILENAME: _docker-volumes.yml
    vars:
      UUID:
        sh: uuidgen | tr -d -

  ## === ‚≠ê  OTHERS =================================================

  before-commit:
    desc: "Run before commit"
    cmds:
      - task: qa-cs-fixer
      - task: qa-phpstan
      - task: qa-security-checker
      - task: qa-phpcpd
      - task: qa-lint-twigs
      - task: qa-lint-yaml
      - task: qa-lint-container
      - task: qa-lint-schema
      - task: tests

  # sleep 20 && nc -vz localhost 3306
  first-install:
    desc: "First install"
    cmds:
      - |
        echo "Are you sure you download to file raw config .env ? [y/N] :"
        read CONFIRM
        if [ "$CONFIRM" = "y" ]; then
          task create-envs
        fi
      - |
        echo "Don't forget to edit the file .env for project ? [Enter] :"
        read CONFIRM
      - |
        echo "Are you sure you download to file raw config docker-compose ? [y/N] :"
        read CONFIRM
        if [ "$CONFIRM" = "y" ]; then
          task generate-docker-compose
          task docker-up
          echo "Wait the service ..."
          sleep 10
          echo "Are you sure the docker service is UP ? [Enter] :"
          read CONFIRM
        fi
      - task: composer-install
      - |
        echo "Are you sure you run to npm install ? [y/N] :"
        read CONFIRM
        if [ "$CONFIRM" = "y" ]; then
          task npm-install
        fi
      - |
        echo "Are you directory var/ is exist ? [Y/n] :"
        read CONFIRM
        if [ "$CONFIRM" = "n" ]; then
          mkdir var
        fi
      - task: sf-perm
      - task: sf-ddc
      - task: sf-dmm
      - |
        echo "Are you sure you want to datafixture ? [y/N] :"
        read CONFIRM
        if [ "$CONFIRM" = "y" ]; then
          task sf-dfl
        fi
      - task: sf-start
      - task: sf-open

  start:
    desc: "Start"
    cmds:
      - |
        if [ ! -f .env ]; then
          task first-install
        else
          task docker-up 
          task sf-start 
          task sf-open
        fi

  stop:
    desc: "Stop"
    cmds:
      - |
        echo "Are you sure you want to stop ? [y/N] :"
        read CONFIRM
        if [ "$CONFIRM" = "y" ]; then
          task sf-stop
          echo "Are you docker stop or down ? [S/d] :"
          read CONFIRM_DOCKER
          if [ "$CONFIRM_DOCKER" = "d" ]; then
            task docker-down
          else
            task docker-stop
          fi
        fi

  reset-db:
    desc: "Reset database"
    cmds:
      - |
        echo "Are you sure you want to reset ? [y/N] :"
        read CONFIRM
        if [ "$CONFIRM" = "y" ]; then
          task sf-ddd
          task sf-ddc
          task sf-dmm
        fi

  rebuild-db:
    desc: "Reset database and reload fixtures"
    cmds:
      - |
        echo "Are you sure you want to reset and reload fixtures ? [y/N] :"
        read CONFIRM
        if [ "$CONFIRM" = "y" ]; then
          task sf-ddd
          task sf-ddc
          task sf-dmm
          task sf-dfl
        fi

  reset-db-test:
    desc: "Reset test database"
    cmds:
      - |
        echo "Are you sure you want to reset test database ? [y/N] :"
        read CONFIRM
        if [ "$CONFIRM" = "y" ]; then
          task sf-ddd-test
          task sf-ddc-test
          task sf-dmm-test
        fi

  rebuild-db-test:
    desc: "Reset test database and reload fixtures"
    cmds:
      - |
        echo "Are you sure you want to reset and reload fixtures ? [y/N] :"
        read CONFIRM
        if [ "$CONFIRM" = "y" ]; then
          task sf-ddd-test
          task sf-ddc-test
          task sf-dmm-test
          task sf-dfl-test
        fi

  health-check:
    desc: "Perform health check after files generation"
    cmds:
      - echo "Health check performed succesfully !"
    preconditions:
      - sh: "[ ! -d _docker-components  ]"
        msg: "_docker-components folder not removed !"
      - sh: "[ -f docker-compose.yml ]"
        msg: "docker-compose file missing"
